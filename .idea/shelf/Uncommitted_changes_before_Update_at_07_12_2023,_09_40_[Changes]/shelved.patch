Index: src/main.c
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#include \"patient_queue.h\"\n#include \"symptoms.h\"\n#include \"triage_level.h\"\n#include \"vitals.h\"\n#include <ncurses.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid clearInputBuffer();\nstruct Patient input_patient();\nvoid input_vitals(struct Vitals *vitals);\nint main(void) {\n\n  struct patient_queue patient_queue = {NULL, NULL, NULL, NULL, NULL};\n\n  char choice;\n  while (choice != 'q') {\n\n    printf(\"(T)riage new patient      (I)nput patient from file       (R)emove \"\n           \"Patient         (D)isplay Queue\\n\");\n    choice = getchar();\n    clearInputBuffer();\n\n    switch (choice) {\n    case 'T':\n    case 't':\n      add_patient_to_queue(&patient_queue, input_patient());\n      print_queue(&patient_queue);\n      break;\n    case 'I':\n    case 'i':\n      break;\n    case 'R':\n    case 'r':\n      break;\n    case 'D':\n    case 'd':\n      break;\n    default:\n      printf(\"Invalid input try again\");\n    }\n  }\n}\n\nvoid input_int(char *message, int *dest) {\n  while (true) {\n    printf(\"%s\\n\", message);\n    int res = scanf(\"%d\", dest);\n    clearInputBuffer();\n    if (res != 1) {\n      printf(\"Invalid input. Try again!\\n\");\n    } else {\n      return;\n    }\n  }\n}\n\nvoid input_double(char *message, double *dest) {\n  while (true) {\n    printf(\"%s\\n\", message);\n    int res = scanf(\"%lf\", dest);\n    clearInputBuffer();\n    if (res != 1) {\n      printf(\"Invalid input. Try again!\\n\");\n    } else {\n      return;\n    }\n  }\n}\n\nvoid input_char(char *choice, char *message, char *valid_chars) {\n  while (true) {\n    printf(\"%s\\n\", message);\n    char c = getchar();\n    clearInputBuffer();\n    int i = 0;\n    while (valid_chars[i] != '\\0') {\n      if (c == valid_chars[i]) {\n        *choice = c;\n        return;\n      }\n      ++i;\n    }\n    printf(\"Invalid input. Try again!\\n\");\n  }\n}\n\nvoid input_string(char *message, char *dest) {\n  while (true) {\n    printf(\"%s\\n\", message);\n    int res = scanf(\"%s\", dest);\n    if (res != 1) {\n      printf(\"Invalid input. Try again!\\n\");\n    } else {\n      return;\n    }\n  }\n}\n\nstruct Patient input_patient() {\n\n  struct Patient patient;\n\n  // Get patient Name\n  input_string(\"input patient name\", patient.name);\n\n  // Get patient Age\n  input_int(\"Input patient age\", &patient.age);\n\n  // Get patient Gender\n  char choice;\n  input_char(&choice, \"Input patient gender, (M)ale or (F)emale\", \"MmFf\");\n  switch (choice) {\n  case 'M':\n  case 'm':\n    patient.gender = Male;\n    break;\n  case 'F':\n  case 'f':\n    patient.gender = Female;\n    break;\n  }\n\n  // Get patient Vitals\n  input_char(&choice, \"Would you like to input Vital Parameters? (Y)es  (N)o\",\n             \"YyNn\");\n  switch (choice) {\n  case 'Y':\n  case 'y':\n    patient.vitals = (struct Vitals *)malloc(sizeof(struct Vitals));\n    input_vitals(patient.vitals);\n    break;\n  case 'N':\n  case 'n':\n    patient.vitals = NULL;\n    break;\n  }\n\n  return patient;\n}\n\nvoid input_vitals(struct Vitals *vitals) {\n\n  char choice;\n\n  input_char(&choice,\n             \"Is the airway: (B)locked (F)ree or (I)nspiratory Stridor?\",\n             \"BbFfIi\");\n\n  switch (choice) {\n  case 'B':\n  case 'b':\n    vitals->airway = Blocked;\n    break;\n  case 'F':\n  case 'f':\n    vitals->airway = Free;\n    break;\n  case 'I':\n  case 'i':\n    vitals->airway = Inspiratory_stridor;\n    break;\n  }\n\n  // Get patient_vitals Kol\n  input_char(&choice, \"Is the patient with kol? (Y)es  (N)o\", \"YyNn\");\n  switch (choice) {\n  case 'Y':\n  case 'y':\n    vitals->with_kol = true;\n    break;\n  case 'N':\n  case 'n':\n    vitals->with_kol = false;\n    break;\n  }\n\n  input_int(\"Input Oxygen Saturation\", &vitals->oxygen_saturation);\n\n  // Get patient_vitals Airway\n  input_char(&choice, \"Is the patient with oxygen? (Y)es  (N)o\", \"YyNn\");\n  switch (choice) {\n  case 'Y':\n  case 'y':\n    vitals->with_oxygen = true;\n    break;\n  case 'N':\n  case 'n':\n    vitals->with_oxygen = false;\n    break;\n  }\n\n  input_int(\"Input Respiration Frequency\", &vitals->respiration_frequency);\n\n  input_int(\"Input Pulse\", &vitals->pulse);\n\n  input_int(\"Input Systolic Blood Pressure\", &vitals->systolic_blood_pressure);\n\n  input_int(\"Input Glasgow Coma Scale Number\", &vitals->glasgow_coma_scale);\n\n  input_double(\"Input Temperature Celcius\", &vitals->temperature_celcius);\n}\nvoid clearInputBuffer() {\n  int c;\n  while ((c = getchar()) != '\\n' && c != EOF) {\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main.c b/src/main.c
--- a/src/main.c	(revision 92d2077993e80044b597d04c3b155b4b3858f759)
+++ b/src/main.c	(date 1701874694526)
@@ -2,7 +2,7 @@
 #include "symptoms.h"
 #include "triage_level.h"
 #include "vitals.h"
-#include <ncurses.h>
+#include "ncurses.h"
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
Index: cmake-build-debug/Testing/Temporary/LastTest.log
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>Start testing: Dec 06 12:50 CET\n----------------------------------------------------------\nEnd testing: Dec 06 12:50 CET\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/cmake-build-debug/Testing/Temporary/LastTest.log b/cmake-build-debug/Testing/Temporary/LastTest.log
--- a/cmake-build-debug/Testing/Temporary/LastTest.log	(revision 92d2077993e80044b597d04c3b155b4b3858f759)
+++ b/cmake-build-debug/Testing/Temporary/LastTest.log	(date 1701874694528)
@@ -1,3 +1,3 @@
-Start testing: Dec 06 12:50 CET
+Start testing: Dec 06 15:54 CET
 ----------------------------------------------------------
-End testing: Dec 06 12:50 CET
+End testing: Dec 06 15:54 CET
